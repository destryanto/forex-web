COMPATIBILITIES WITH PREVIOUS RELEASE, IF ANY.

  For instance:

  Applications which open two InputStreams on the ResultSet column now
  fail.
-->


<h4>Incompatibilities with Previous Release</h4>

<p>
Applications that use too long string values as arguments for stored
methods, or use tables with generated columns for which the generated
value is longer than the type of the generated column, may now see
exceptions.
</p>


<p>
Applications that use implicit or explicit casts that truncate the
value to make it fit in the receiving data type, may see warnings
reported on the <code>ResultSet</code> or <code>Statement</code>.
</p>

<!-- 
  DESCRIBE WHY THE CHANGE WAS MADE.

  For instance:

  The previous behavior violated the JDBC standard. The new behavior
  is correct.
-->


<h4>Rationale for Change</h4>

<p>
The previous behavior could lead to inadvertent data loss, since the
truncation was ignored. The previous behavior was not as per the SQL
standard.
</p>

<!-- 
  OPTIONAL: DESCRIBE HOW TO REVERT TO THE PREVIOUS BEHAVIOR OR
  OTHERWISE AVOID THE INCOMPATIBILITIES INTRODUCED BY THIS CHANGE.

  For instance:

  Users must recode applications which open multiple streams on the same column.
-->


<h4>Application Changes Required</h4>

<p>
Applications should ensure that string values used as arguments to
stored methods are within the range of the argument type.
</p>

<p>
Applications should ensure that string values assigned to generated
columns are within the range of the argument type.
</p>


<p>
Example:
</p>

<pre lang="SQL">
CREATE TABLE t_5749 (c VARCHAR(5) GENERATED ALWAYS
       AS ('--' || b), b VARCHAR(5))
INSERT INTO t_5749 VALUES (default, '12345')
</pre>

<p>
The above code would work before, but silently truncate the generated
value from '--12345' to '--123'. It will now throw <code>SQLException</code> with SQL state <code>22001</code>.
</p>


<p>
If the old behavior is desired, the generation expression could be
wrapped in a call to the <code>CAST</code> function:
</p>


<pre lang="SQL">
CREATE TABLE t_5749 (c VARCHAR(5) GENERATED ALWAYS
       AS (CAST('--' || b AS VARCHAR(5))), b VARCHAR(5))
INSERT INTO t_5749 VALUES (default, '12345')
</pre>


<p>
In that case, the INSERT statement would pass with no exceptions.
Instead, the <code>Statement</code> instance on which it was executed
will hold a <code>DataTruncation</code> warning with SQL
state <code>01004</code>, which can be retrieved by
calling <code>getWarnings()</code> on the <code>Statement</code>.
</p>


<p>
Example:
</p>

<pre lang="Java">
s.executeUpdate("create procedure p5749 (a varchar(5)) modifies sql data 
    external name '...' language java parameter style java")
CallableStatement cs = conn.prepareCall("call p5749(?)");
cs.setString(1, "123456");
cs.execute();
</pre>

<p>
The above code would work before, but silently truncate the generated
value from '123456' to '12345'. The <code>execute</code> will now throw <code>SQLException</code> with SQL state <code>22001</code>.
</p>


<p>
As with the previous example, it is possible to wrap the parameter